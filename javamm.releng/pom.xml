<?xml version="1.0" encoding="UTF-8"?>
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>javamm</groupId>
	<artifactId>javamm.releng</artifactId>
	<version>1.1.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<modules>
		<module>../javamm.targetplatform</module>
		<module>../javamm.runtime</module>
		<module>../javamm.mwe2</module>
		<module>../javamm</module>
		<module>../javamm.ui</module>
		<module>../javamm.examples</module>
		<module>../javamm.ui.examples</module>
		<module>../javamm.tests</module>
		<module>../javamm.sdk</module>
		<module>../javamm.site</module>
	</modules>

	<properties>
		<tycho-version>0.23.0</tycho-version>
		<tycho-extras-version>0.23.0</tycho-extras-version>
		<maven-surefire-plugin.version>2.17</maven-surefire-plugin.version>
		<maven-antrun-plugin.version>1.7</maven-antrun-plugin.version>
		<junit-version>4.11</junit-version>
		<jacoco-version>0.7.4.201502262128</jacoco-version>
		<findbugs-version>2.5.5</findbugs-version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<memoryArgs>-Xms256M -Xmx1024M -XX:PermSize=256M -XX:MaxPermSize=256M -XX:+HeapDumpOnOutOfMemoryError</memoryArgs>
		<xtext.version>2.8.3</xtext.version>
		<xtext-version>${xtext.version}</xtext-version>
		<platform-version>[3.9,4.0)</platform-version>
		<fornax-oaw-m2-plugin-version>3.4.0</fornax-oaw-m2-plugin-version>

		<target-file-name>mars</target-file-name>

		<!-- <jacoco.reportPath>../target/jacoco.exec</jacoco.reportPath> -->
		<!-- <findbugs.reportPath>../target/findbugs</findbugs.reportPath> -->

		<!-- Sonar -->
		<sonar.language>java</sonar.language>
		<sonar.core.codeCoveragePlugin>jacoco</sonar.core.codeCoveragePlugin>
		<sonar.jacoco.reportPath>${project.basedir}/../target/jacoco.exec</sonar.jacoco.reportPath>
		<!--  <sonar.junit.reportsPath>../${project.artifactId}.tests/target/surefire-reports/</sonar.junit.reportsPath> -->
		<sonar.exclusions>file:**/*JvmModelGenerator.java,file:**/New*FileWizard*.java,file:**/src-gen/**,file:**/emf-gen/**,file:**/impl/*ImplCustom.java,file:**/tests/**,**/*RuntimeModule.java,**/*UiModule.java,**/*XcoreReader.java,**/*UiExamples.java,**/*TypeSystemGen*.java,**/*StandaloneSetup*.java</sonar.exclusions>
		
		<!-- see http://sonarqube.15.x6.nabble.com/sonar-issue-ignore-multicriteria-td5021722.html and
		 http://stackoverflow.com/questions/21825469/configure-sonar-sonar-issue-ignore-multicriteria-through-maven
		 for the multicriteria property -->
		<sonar.issue.ignore.multicriteria>e11,e12,e13,e14,e2,e3,e4,e5</sonar.issue.ignore.multicriteria>
		
		<!-- standard convention for method names: in the outline tree provider we
		 must use methods that start with _ and they'd violate the rule squid:S00100 -->
		<sonar.issue.ignore.multicriteria.e11.ruleKey>squid:S00100</sonar.issue.ignore.multicriteria.e11.ruleKey>
		<sonar.issue.ignore.multicriteria.e11.resourceKey>**/*OutlineTreeProvider.java</sonar.issue.ignore.multicriteria.e11.resourceKey>

		<sonar.issue.ignore.multicriteria.e12.ruleKey>squid:S00100</sonar.issue.ignore.multicriteria.e12.ruleKey>
		<sonar.issue.ignore.multicriteria.e12.resourceKey>**/*AbstractXbaseProposalProvider.java</sonar.issue.ignore.multicriteria.e12.resourceKey>

		<sonar.issue.ignore.multicriteria.e13.ruleKey>squid:S00100</sonar.issue.ignore.multicriteria.e13.ruleKey>
		<sonar.issue.ignore.multicriteria.e13.resourceKey>**/*XbaseCompiler.java</sonar.issue.ignore.multicriteria.e13.resourceKey>

		<sonar.issue.ignore.multicriteria.e14.ruleKey>squid:S00100</sonar.issue.ignore.multicriteria.e14.ruleKey>
		<sonar.issue.ignore.multicriteria.e14.resourceKey>**/*ValueConverterService.java</sonar.issue.ignore.multicriteria.e14.resourceKey>
		
		<!-- "Tabulation characters should not be used"
		 sorry... I don't agree :) -->
		<sonar.issue.ignore.multicriteria.e2.ruleKey>squid:S00105</sonar.issue.ignore.multicriteria.e2.ruleKey>
		<sonar.issue.ignore.multicriteria.e2.resourceKey>**/*.java</sonar.issue.ignore.multicriteria.e2.resourceKey>

		<!-- Unused parameters are needed in these files for polymorphic dispatching -->
		<sonar.issue.ignore.multicriteria.e3.ruleKey>squid:S1172</sonar.issue.ignore.multicriteria.e3.ruleKey>
		<sonar.issue.ignore.multicriteria.e3.resourceKey>**/*XbaseCompiler.java</sonar.issue.ignore.multicriteria.e3.resourceKey>

		<!-- Unused parameters are needed in these files for polymorphic dispatching -->
		<sonar.issue.ignore.multicriteria.e4.ruleKey>squid:S1172</sonar.issue.ignore.multicriteria.e4.ruleKey>
		<sonar.issue.ignore.multicriteria.e4.resourceKey>**/*AbstractXbaseProposalProvider.java</sonar.issue.ignore.multicriteria.e4.resourceKey>

		<!-- Useless parenthesis; these files use code automatically generated -->
		<sonar.issue.ignore.multicriteria.e5.ruleKey>squid:UselessParenthesesCheck</sonar.issue.ignore.multicriteria.e5.ruleKey>
		<sonar.issue.ignore.multicriteria.e5.resourceKey>**/*AbstractXbaseProposalProvider.java</sonar.issue.ignore.multicriteria.e5.resourceKey>
		
		<!--  sonar.skippedModules is deprecated: https://jira.codehaus.org/browse/SONAR-5109 -->
		<!-- instead we must use advanced reactor options: https://jira.codehaus.org/browse/MSONAR-61  -->
		<!-- Example:
			mvn sonar:sonar -pl :javamm.releng,:javamm.runtime,:javamm,:javamm.ui
		 -->
		
		<!-- Otherwise we'll have problems due to generated sources, which are
		 not in the git repository (since Sonarqube 5) -->
		<sonar.scm.disabled>true</sonar.scm.disabled>		

		<findbugs.skip>false</findbugs.skip>
		<swtbot.tests.only>false</swtbot.tests.only>
		<swtbot.tests.skip>false</swtbot.tests.skip>
		
		<!-- properties for deploying the composite update site and zipped products on Sourceforge -->
		
		<!-- since this is used in the pluginManagement section, we need to make sure
			the path always points to this pom's directory; project.basedir will always point
			to the directory of the pom where the pluginManagement's plugins are used -->
		<ant-files-path>${project.basedir}/../javamm.releng/ant</ant-files-path>

		<!-- the subdirectory for the composite update site -->
		<updates.dir>javamm</updates.dir>
		<site.label>Java-- Site</site.label>

		<remote.dir>lbettini,javamm@frs.sourceforge.net:/home/frs/project/javamm</remote.dir>
	
		<!-- local source directory of p2 site for rsync -->
		<rsync.remote.dir>${remote.dir}/updates/releases/</rsync.remote.dir>
		<!-- remote directory of p2 site for rsync -->
		<rsync.local.dir>${user.home}/p2.repositories/${updates.dir}/</rsync.local.dir>

		<!-- pass "-n" to perform a trial run with no changes made -->
		<dryrun></dryrun>
		
		<!-- set it to true to have a self contained p2 repository https://wiki.eclipse.org/Tycho/eclipse-repository#Creating_a_self-contained_p2_repository -->
		<includeAllDependencies>true</includeAllDependencies>
	</properties>

	<profiles>
		<profile>
			<id>luna</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<properties>
				<target-file-name>luna</target-file-name>
			</properties>
		</profile>

		<profile>
			<id>local</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<properties>
				<target-file-name>local</target-file-name>
			</properties>
		</profile>

		<profile>
			<id>build-ide</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<properties>
				<findbugs.skip>true</findbugs.skip>
			</properties>

			<modules>
				<module>../javamm.ide.feature</module>
				<module>../javamm.ide.site</module>
			</modules>
			
			<build>
				<plugins>
					<!-- specify all environments when building the IDE -->
					<plugin>
						<groupId>org.eclipse.tycho</groupId>
						<artifactId>target-platform-configuration</artifactId>
						<version>${tycho-version}</version>
						<configuration>
							<target>
								<artifact>
									<groupId>javamm</groupId>
									<artifactId>javamm.targetplatform</artifactId>
									<version>${project.version}</version>
									<classifier>${target-file-name}</classifier>
								</artifact>
							</target>
							<environments>
								<environment>
									<os>win32</os>
									<ws>win32</ws>
									<arch>x86</arch>
								</environment>
								<environment>
									<os>win32</os>
									<ws>win32</ws>
									<arch>x86_64</arch>
								</environment>
								<environment>
									<os>macosx</os>
									<ws>cocoa</ws>
									<arch>x86_64</arch>
								</environment>
								<!-- This is not present in Mars
								<environment>
									<os>macosx</os>
									<ws>cocoa</ws>
									<arch>x86</arch>
								</environment>
								 -->
								<environment>
									<os>linux</os>
									<ws>gtk</ws>
									<arch>x86</arch>
								</environment>
								<environment>
									<os>linux</os>
									<ws>gtk</ws>
									<arch>x86_64</arch>
								</environment>
							</environments>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<profile>
			<id>ide-tests</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>

			<properties>
				<findbugs.skip>true</findbugs.skip>
			</properties>

			<modules>
				<module>../javamm.ide.feature</module>
				<module>../javamm.ide.site</module>
				<module>../javamm.swtbot.tests</module>
			</modules>
			
		</profile>
	</profiles>

	<build>
		<pluginManagement>
			<plugins>
				<!-- xtend-maven-plugin is in pluginManagement instead of in plugins 
					so that it doesn't run before the exec-maven-plugin's *.mwe2 gen; this way 
					we can list it after. -->

				<plugin>
					<groupId>org.eclipse.xtend</groupId>
					<artifactId>xtend-maven-plugin</artifactId>
					<version>${xtext.version}</version>
					<executions>
						<execution>
							<goals>
								<goal>compile</goal>
								<goal>xtend-install-debug-info</goal>
								<goal>testCompile</goal>
								<goal>xtend-test-install-debug-info</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<outputDirectory>xtend-gen</outputDirectory>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.5</version>
					<configuration>
						<filesets>
							<fileset>
								<directory>${basedir}/xtend-gen</directory>
							</fileset>
						</filesets>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>findbugs-maven-plugin</artifactId>
					<version>${findbugs-version}</version>
					<configuration>
						<skip>${findbugs.skip}</skip>
						<findbugsXmlOutput>true</findbugsXmlOutput>
						<failOnError>false</failOnError>
						<!-- <findbugsXmlOutputDirectory>${findbugs.reportPath}</findbugsXmlOutputDirectory> -->
						<!-- Enables analysis which takes more memory but finds more bugs. 
							If you run out of memory, changes the value of the effort element to 'Low'. -->
						<!-- <effort>Max</effort> -->
						<!-- Low: Reports all bugs (other values are medium and max) -->
						<!-- <threshold>Medium</threshold> -->
						<maxRank>15</maxRank>
						<jvmArgs>-Xmx1024m</jvmArgs>
						<excludeFilterFile>${basedir}/../javamm.releng/findbugs/excludeFilter.xml</excludeFilterFile>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>sonar-maven-plugin</artifactId>
					<version>2.5</version>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>
			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-maven-plugin</artifactId>
				<version>${tycho-version}</version>
				<extensions>true</extensions>
			</plugin>

			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-source-plugin</artifactId>
				<version>${tycho-version}</version>
				<executions>
					<execution>
						<id>plugin-source</id>
						<goals>
							<goal>plugin-source</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.eclipse.tycho.extras</groupId>
				<artifactId>tycho-source-feature-plugin</artifactId>
				<version>${tycho-extras-version}</version>
				<executions>
					<execution>
						<id>source-feature</id>
						<phase>package</phase>
						<goals>
							<goal>source-feature</goal>
						</goals>
						<configuration>
							<excludes>
								<!-- These are bundles and feature that do not have a corresponding 
									source version; NOT the ones that we do not want source versions -->
								<plugin id="javamm.runtime" />
								<plugin id="javamm.ui.examples" />

								<feature id="javamm.swtbot.tests.feature" />

								<feature id="org.eclipse.swtbot.ide" />
								<feature id="org.eclipse.xtext.sdk" />
								<feature id="org.eclipse.xtend.sdk" />
								<feature id="org.eclipse.pde" />
								<feature id="org.eclipse.emf.mwe2.language.sdk" />
								<feature id="org.eclipse.emf.mwe2.runtime.sdk" />
							</excludes>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-p2-plugin</artifactId>
				<version>${tycho-version}</version>
				<executions>
					<execution>
						<id>attach-p2-metadata</id>
						<phase>package</phase>
						<goals>
							<goal>p2-metadata</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<!-- in standard build, use only the current environment -->
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>target-platform-configuration</artifactId>
				<version>${tycho-version}</version>
				<configuration>
					<target>
						<artifact>
							<groupId>javamm</groupId>
							<artifactId>javamm.targetplatform</artifactId>
							<version>${project.version}</version>
							<classifier>${target-file-name}</classifier>
						</artifact>
					</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.eclipse.tycho</groupId>
				<artifactId>tycho-packaging-plugin</artifactId>
				<version>${tycho-version}</version>
				<configuration>
					<format>'v'yyyyMMdd'-'HHmm</format>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco-version}</version>
				<executions>
					<execution>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Where to put jacoco coverage report -->
							<destFile>${sonar.jacoco.reportPath}</destFile>
							<includes>
								<include>javamm.*</include>
							</includes>
							<excludes>
								<exclude>**/org/eclipse/**/*.class</exclude>
								<exclude>**.antlr**</exclude>
								<exclude>**.parseTree**</exclude>
								<exclude>**Abstract*RuntimeModule.class</exclude>
								<exclude>**/*SetupGenerated*.class</exclude>
								<exclude>**/Abstract*Validator.class</exclude>
								<exclude>**/*GrammarAccess*.class</exclude>
								<exclude>**/Abstract*UiModule.class</exclude>
								<exclude>**/Abstract*ProposalProvider.class</exclude>
								<exclude>**/*Test.class</exclude>
								<exclude>**/*Internal*</exclude>
								<exclude>**/*Sequencer*</exclude>
								<exclude>**/internal/*</exclude>
								<exclude>**/javamm/javamm/util/*</exclude>
								<exclude>**/javamm/javamm/impl/*</exclude>
							</excludes>
							<append>true</append>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
