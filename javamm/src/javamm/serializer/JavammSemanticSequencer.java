/*
 * generated by Xtext
 */
package javamm.serializer;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.xbase.XExpression;

import com.google.inject.Inject;

import javamm.internal.serializer.XbaseSemanticSequencerAccess;
import javamm.javamm.JavammArrayConstructorCall;
import javamm.javamm.JavammArrayDimension;
import javamm.services.JavammGrammarAccess;
import javamm.services.JavammGrammarAccess.JavammArrayConstructorCallElements;
import javamm.util.JavammModelUtil;

/**
 * Customized to deal with custom rules with special treatments.
 * 
 * @author Lorenzo Bettini
 *
 */
public class JavammSemanticSequencer extends XbaseSemanticSequencerAccess {
	@Inject
	private JavammGrammarAccess access;

	@Inject
	private JavammModelUtil modelUtil;

	@Override
	protected void sequence_JavammArrayConstructorCall(EObject context, JavammArrayConstructorCall semanticObject) {
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder acceptor = createSequencerFeeder(semanticObject, nodes);
		JavammArrayConstructorCallElements elements = access.getJavammArrayConstructorCallAccess();

		acceptor.accept(elements.getTypeJvmTypeQualifiedNameParserRuleCall_0_0_2_0_1(), semanticObject.getType());

		List<XExpression> associations = modelUtil.arrayDimensionIndexAssociations(semanticObject);
		List<JavammArrayDimension> dimensions = semanticObject.getDimensions();
		acceptor.accept(elements.getDimensionsJavammArrayDimensionParserRuleCall_0_0_3_0(), dimensions.get(0), 0);
		if (associations.get(0) != null) {
			acceptor.accept(elements.getIndexesXExpressionParserRuleCall_1_0(), semanticObject.getIndexes().get(0), 0);
		}
		for (int i = 1; i < associations.size(); i++) {
			acceptor.accept(elements.getDimensionsJavammArrayDimensionParserRuleCall_3_0_0(), dimensions.get(i), i);
			if (associations.get(i) != null) {
				acceptor.accept(elements.getIndexesXExpressionParserRuleCall_3_1_0(), associations.get(i), i);
			}
		}

		if (semanticObject.getArrayLiteral() != null) {
			acceptor.accept(elements.getArrayLiteralJavammArrayLiteralParserRuleCall_4_0(),
					semanticObject.getArrayLiteral());
		}

		acceptor.finish();
	}
}
