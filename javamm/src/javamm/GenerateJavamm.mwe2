module javamm.GenerateJavamm

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "javamm"
var projectName = "javamm"
var runtimeProject = "../${projectName}"
var generateXtendStub = true
var encoding = "UTF-8"
//var grammarURI = "classpath:/javamm/Javamm.xtext"
var grammarURI = "platform:/resource/${projectName}/src/javamm/Javamm.xtext"

Workflow {
    bean = StandaloneSetup {
    	// initialize the EMF singleton with proper classpath to platform:/resource mappings
		scanClassPath = true
		// put the Xbase genmodel into the EMF plugins singleton
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel"
		
    	// register current projects and its siblings for platform URI map, as they are not on the classpath.
    	platformUri = "${runtimeProject}/.."
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/src-gen"
    }

    component = DirectoryCleaner {
    	directory = "${runtimeProject}/emf-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}/model/generated"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.ui/src-gen"
    }
    
    component = DirectoryCleaner {
    	directory = "${runtimeProject}.tests/src-gen"
    }

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		// generate the Java code for the EPackage
		// the Xsemantics genmodel needs to find the Xbase genmodel thus the latter was registered in the standalone setup
		genModel = "platform:/resource/${projectName}/model/custom/Javamm.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}
    
    component = Generator {
    	pathRtProject = runtimeProject
    	pathUiProject = "${runtimeProject}.ui"
    	pathTestProject = "${runtimeProject}.tests"
    	projectNameRt = projectName
    	projectNameUi = "${projectName}.ui"
    	encoding = encoding
    	language = auto-inject {
    		// here we initialize a resource set with a list of ecore files such that the grammar points to the local EPackages
			// rather than the generated EPackages (which would be inconsistent).
			loadedResource = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore"
			loadedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xtype.ecore"
			loadedResource = "platform:/resource/org.eclipse.xtext.xbase/model/Xbase.ecore"
			loadedResource = "platform:/resource/org.eclipse.xtext.xbase/model/XAnnotations.ecore"
    		
    		loadedResource = "platform:/resource/${projectName}/model/custom/Javamm.ecore"
    		
    		uri = grammarURI
    
    		// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    
    		// generates Java API for the generated EPackages
//    		fragment = ecore.EMFGeneratorFragment auto-inject {}
    
    		// the old serialization component
    		// fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}    
    
    		// serializer 2.0
    		fragment = serializer.SerializerFragment auto-inject {
    			generateStub = false
    		}
    
    		// a custom ResourceFactory for use with EMF
    		fragment = resourceFactory.ResourceFactoryFragment auto-inject {}
    
    		// The antlr parser generator fragment.
    		fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
    		//  options = {
    		//      backtrack = true
    		//  }
    			antlrParam = "-Xconversiontimeout" antlrParam = "10000"
    		}
    
    		// Xtend-based API for validation
    		fragment = validation.ValidatorFragment auto-inject {
    		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    		//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    		}
    
    		// old scoping and exporting API
    		// fragment = scoping.ImportURIScopingFragment auto-inject {}
    		// fragment = exporting.SimpleNamesFragment auto-inject {}
    
    		// scoping and exporting API
    		fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
    		fragment = exporting.QualifiedNamesFragment auto-inject {}
    		fragment = builder.BuilderIntegrationFragment auto-inject {}
    
    		// generator API
    		fragment = generator.GeneratorFragment auto-inject {
    			generateStub = false
    		}
    
    		// formatter API
    		fragment = formatting.FormatterFragment auto-inject {}
    
    		// labeling API
    		fragment = labeling.LabelProviderFragment auto-inject {}
    
    		// outline API
    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
    		fragment = outline.QuickOutlineFragment auto-inject {}
    
    		// quickfix API
    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
    
    		// content assist API
    		fragment = contentAssist.ContentAssistFragment auto-inject {}
    
    		// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {
    			antlrParam = "-Xconversiontimeout" antlrParam = "10000"
    		}
    
    		// generates junit test support classes into Generator#pathTestProject
    		fragment = junit.Junit4Fragment auto-inject {}
    
    		// rename refactoring
    		fragment = refactoring.RefactorElementNameFragment auto-inject {}
    
    		// provides the necessary bindings for java types integration
    		fragment = types.TypesGeneratorFragment auto-inject {}
    
    		// generates the required bindings only if the grammar inherits from Xbase
    		fragment = xbase.XbaseGeneratorFragment auto-inject {}
    		
    		// generates the required bindings only if the grammar inherits from Xtype
    		fragment = xbase.XtypeGeneratorFragment auto-inject {}
    
    		// provides a preference page for template proposals
    		fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
    
    		// provides a compare view
    		fragment = compare.CompareFragment auto-inject {}
    		
    		fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
    		      generatorProjectName = "${projectName}"
    		}
    	}
    }
}

