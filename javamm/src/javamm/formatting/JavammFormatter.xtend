/*
 * generated by Xtext
 */
package javamm.formatting

import com.google.inject.Inject
import javamm.services.JavammGrammarAccess
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.eclipse.xtext.xbase.formatting.XbaseFormatter
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess
import javamm.services.JavammGrammarAccess.JavammSemicolonStatementElements
import javamm.services.JavammGrammarAccess.JavammMethodElements

// import com.google.inject.Inject;
// import javamm.services.JavammGrammarAccess

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class JavammFormatter extends XbaseFormatter {

	@Inject extension JavammGrammarAccess
	
	@Inject XbaseGrammarAccess xbaseGrammarAccess
	
	override protected void configureFormatting(FormattingConfig c) {
		super.configureFormatting(c)
		
		// It's usually a good idea to activate the following three statements.
		// They will add and preserve newlines around comments
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
		
		configureJavammSemicolonStatement(c, javammSemicolonStatementAccess)
		configureJavammMethod(c, javammMethodAccess)
	}

	override protected getGrammarAccess() {
		xbaseGrammarAccess
	}

	override configureXBlockExpression(FormattingConfig c, XbaseGrammarAccess.XBlockExpressionElements _ele) {
		val ele = XBlockExpressionAccess
		c.setLinewrap().after(ele.getLeftCurlyBracketKeyword_1());
		c.setIndentationIncrement().after(ele.getLeftCurlyBracketKeyword_1());
		// semicolons are handled by our custom JavammSemicolonStatement
//		c.setLinewrap().after(ele.getExpressionsAssignment_2_0());
//		c.setNoSpace().before(ele.getSemicolonKeyword_2_1());
//		c.setLinewrap().after(ele.getSemicolonKeyword_2_1());
		c.setLinewrap().before(ele.getRightCurlyBracketKeyword_3());
		c.setIndentationDecrement().before(ele.getRightCurlyBracketKeyword_3());
	}

	override configureXIfExpression(FormattingConfig c, XbaseGrammarAccess.XIfExpressionElements _ele) {
		super.configureXIfExpression(c, _ele)
		
		// the following must be repeated for our parenthesis keywords
		val ele = XIfExpressionAccess
		c.setNoSpace().after(ele.getLeftParenthesisKeyword_2());
		c.setNoSpace().before(ele.getRightParenthesisKeyword_4());
	}

	override configureXWhileExpression(FormattingConfig c, XbaseGrammarAccess.XWhileExpressionElements _ele) {
		super.configureXWhileExpression(c, _ele)
		
		// the following must be repeated for our parenthesis keywords
		val ele = XWhileExpressionAccess
		c.setNoSpace().after(ele.getLeftParenthesisKeyword_2());
		c.setNoSpace().before(ele.getRightParenthesisKeyword_4());
	}

	override configureXDoWhileExpression(FormattingConfig c, XbaseGrammarAccess.XDoWhileExpressionElements _ele) {
		super.configureXDoWhileExpression(c, _ele)
		
		// the following must be repeated for our parenthesis keywords
		val ele = XDoWhileExpressionAccess
		c.setNoSpace().after(ele.getLeftParenthesisKeyword_4());
		c.setNoSpace().before(ele.getRightParenthesisKeyword_6());
	}

	override configureXBasicForLoopExpression(FormattingConfig c, XbaseGrammarAccess.XBasicForLoopExpressionElements _ele) {
		super.configureXBasicForLoopExpression(c, _ele)
		
		// the following must be repeated for our parenthesis keywords
		val ele = XBasicForLoopExpressionAccess
		c.setNoSpace().after(ele.getLeftParenthesisKeyword_2());
		c.setNoSpace().before(ele.getCommaKeyword_3_1_0());
		c.setNoSpace().before(ele.getSemicolonKeyword_4());
		c.setNoSpace().before(ele.getCommaKeyword_7_1_0());
		c.setNoSpace().before(ele.getSemicolonKeyword_6());
		c.setNoSpace().before(ele.getRightParenthesisKeyword_8());
	}

	override configureXFeatureCall(FormattingConfig c, XbaseGrammarAccess.XFeatureCallElements _ele) {
		super.configureXFeatureCall(c, _ele)
		
		val ele = XFeatureCallAccess
		c.setNoSpace().before(ele.commaKeyword_2_1_1_0);
		c.setNoSpace().around(ele.explicitOperationCallAssignment_2_0);
		c.setNoSpace().before(ele.rightParenthesisKeyword_2_2);
		c.setNoSpace().around(ele.leftSquareBracketKeyword_3_0);
		c.setNoSpace().around(ele.rightSquareBracketKeyword_3_2);
	}

	override configureXMemberFeatureCall(FormattingConfig c, XbaseGrammarAccess.XMemberFeatureCallElements _ele) {
		super.configureXMemberFeatureCall(c, _ele)
		
		val ele = XMemberFeatureCallAccess
		c.setNoSpace().around(ele.getFullStopKeyword_1_0_0_0_1_0());
		c.setNoSpace().around(ele.getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0());
		c.setNoSpace().around(ele.fullStopKeyword_1_1_0_0_1);
		c.setNoSpace().before(ele.commaKeyword_1_1_2_1_1_0);
		c.setNoSpace().around(ele.explicitOperationCallAssignment_1_1_2_0);
		c.setNoSpace().before(ele.rightParenthesisKeyword_1_1_2_2);
	}

	def private configureJavammSemicolonStatement(FormattingConfig c, JavammSemicolonStatementElements ele) {
		c.setLinewrap().after(ele.semicolonKeyword_1);
		c.setNoSpace().before(ele.semicolonKeyword_1);
		c.setLinewrap().after(ele.semicolonKeyword_1);
	}

	def private configureJavammMethod(FormattingConfig c, JavammMethodElements ele) {
		c.setNoSpace.before(ele.leftParenthesisKeyword_0_0_3)
		c.setNoSpace.after(ele.leftParenthesisKeyword_0_0_3)
		c.setNoSpace.before(ele.rightParenthesisKeyword_2)
		
		c.setNoSpace.before(ele.commaKeyword_1_1_0)
	}
}
