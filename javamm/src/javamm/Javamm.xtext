grammar javamm.Javamm with org.eclipse.xtext.xbase.Xbase

//generate javamm "http://www.Javamm.javamm"
import "http://www.Javamm.javamm"

import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

JavammProgram:
	(javammMethods+=JavammMethod)*
	main=Main
;

JavammMethod:
	=>(type=JvmTypeReference name=ValidID 
		'(') (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' 
			body=XBlockExpression;


Main returns XBlockExpression:
	{Main}
	(expressions+=JavammStatement ';'?)*;

XBlockExpression returns XExpression: 
	{XBlockExpression}
	'{'
		(expressions+=JavammStatement ';'?)*
	'}';

JavammStatement returns XExpression:
//	JavammArrayConstructorCall | not a valid statement
	=>XVariableDeclaration |
	JavammAssignmentStatement |
	JavammMemberFeatureCallStatement |
//	XConstructorCall |
	XBlockExpression |
	XSwitchExpression |
//	XFeatureCall |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	XWhileExpression |
	XDoWhileExpression |
	XReturnExpression
;

XExpressionOrVarDeclaration returns XExpression:
	=>XVariableDeclaration | XExpression;

XVariableDeclaration returns XVariableDeclaration:
	{JavammXVariableDeclaration}
	type=JvmTypeReference name=ValidID ('=' right=XExpression)?;

JavammAssignmentStatement returns XExpression :
	=>({JavammXAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] 
		('[' index=XExpression ']')?
		OpSingleAssign) value=XAssignment;

JavammMemberFeatureCallStatement returns XExpression:
	XPrimaryExpression
	(
		=>({XMemberFeatureCall.memberCallTarget=current} ".") 
			feature=[types::JvmIdentifiableElement|IdOrSuper] (
				=>explicitOperationCall?='(' 
					(
					    memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
					)? 
				')')?
	)*;

XAssignment returns XExpression :
	=>({JavammXAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] 
		'[' index=XExpression ']'
		OpSingleAssign) value=XAssignment |	
	=>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] 
		OpSingleAssign) value=XAssignment |	
	XOrExpression (
		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	)?;

XFeatureCall returns XExpression:
	{JavammXFeatureCall}
	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	(=>explicitOperationCall?='(' 
		(
		    featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')' 
	)?
	('[' index=XExpression ']')?;

XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] 
	(=>explicitConstructorCall?='(' 
		(
		    arguments+=XExpression (',' arguments+=XExpression)*
		)? 
	')')?;

JavammArrayConstructorCall returns XExpression:
	=>({JavammArrayConstructorCall}
	'new'
	type=[types::JvmType|QualifiedName] '[') index=XExpression ']'
;

XMemberFeatureCall returns XExpression:
	XPrimaryExpression
	(
		=>({XAssignment.assignable=current} ('.'|explicitStatic?="::") 
			feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
				value=XAssignment
	|
		=>({XMemberFeatureCall.memberCallTarget=current} ".") 
			feature=[types::JvmIdentifiableElement|IdOrSuper] (
				=>explicitOperationCall?='(' 
					(
					    memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
					)? 
				')')?
	)*;

XPrimaryExpression returns XExpression:
	JavammArrayConstructorCall |
	XConstructorCall |
//	XBlockExpression |
//	XSwitchExpression |
//	XSynchronizedExpression |
	XFeatureCall |
	XLiteral |
//	XIfExpression |
//	XForLoopExpression |
//	XBasicForLoopExpression |
//	XWhileExpression |
//	XDoWhileExpression |
//	XThrowExpression |
//	XReturnExpression |
//	XTryCatchFinallyExpression |
	XParenthesizedExpression;

XLiteral returns XExpression:
//	XCollectionLiteral |
//	XClosure |
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XStringLiteral
//	XTypeLiteral
;