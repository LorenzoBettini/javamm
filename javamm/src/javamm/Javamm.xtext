grammar javamm.Javamm with org.eclipse.xtext.xbase.Xbase

//generate javamm "http://www.Javamm.javamm"
import "http://www.Javamm.javamm"

import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

JavammProgram:
	(javammMethods+=JavammMethod)*
	main=Main
;

JavammMethod:
	=>({JavammMethod} type=JvmTypeReference name=ValidID 
		'(') (params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' 
			body=XBlockExpression;

/* 
 * The ';' only "eats" possible additional semicolons which is legal in Java.
 * The required ';' is taken care of in the JavammSemicolonStatement rule
 */
Main returns XBlockExpression:
	{Main}
	(expressions+=JavammStatementOrBlock ';'*)*;

/**
 * The syntactic predicate on XBlockExpression is required to avoid
 * ambiguity with array literal.  However, XBlockExpression must come first, to
 * be able to parse both while(...) {} and while(...) st; for example.
 * If we put the predicate on single statement, then it does not seem to
 * be possible to parse incomplete member feature call.
 */
JavammStatementOrBlock returns XExpression:
//	JavammArrayConstructorCall | not a valid statement
	=>XBlockExpression |
	JavammSingleStatement
;

JavammSingleStatement returns XExpression:
	JavammSemicolonStatement |
	XSwitchExpression |
	XIfExpression |
	XForLoopExpression |
	XBasicForLoopExpression |
	XWhileExpression
;

/*
 * These are the Java statements that require a semicolon at the end.
 * 
 * The final ; should be optional in order to be able to parse incomplete
 * expressions and give better content assist.
 */
JavammSemicolonStatement returns XExpression:
//	JavammArrayConstructorCall | not a valid statement
	(
	JavammBranchingStatement |
	XExpressionOrVarDeclaration |
	XDoWhileExpression |
	XReturnExpression
	) ->';'?
;

JavammBranchingStatement returns XExpression:
	{JavammContinueStatement} instruction="continue" |
	{JavammBreakStatement} instruction="break"
;

/* 
 * The ';' only "eats" possible additional semicolons which is legal in Java.
 * The required ';' is taken care of in the JavammSemicolonStatement rule
 */
XBlockExpression returns XExpression: 
	{XBlockExpression}
	'{'
		(expressions+=JavammStatementOrBlock ';'*)*
	'}';

// Don't put the predicate in the rule for XExpressionOrVarDeclaration:
// it would break partial parsing:
// "int i =" would not be parsed as an incomplete variable declaration 
// put the predicate in XVariableDeclaration rule directly
//XExpressionOrVarDeclaration returns XExpression:
//	=>XVariableDeclaration | XExpression;

// Use the predicate to avoid ambiguities with XExpression
XVariableDeclaration returns XVariableDeclaration:
	=>({JavammXVariableDeclaration}
	type=JvmTypeReference name=ValidID) ('=' right=XExpression)?
	(=>',' additionalVariables+=JavammAdditionalXVariableDeclaration)*;
	// the second predicate is to avoid ambiguities with for loops
	// that already consider several variable declarations
	// in our case we always parse them as several variable declarations
	// since we allow them also as standard variable declarations as in Java

JavammAdditionalXVariableDeclaration returns XVariableDeclaration:
	{JavammAdditionalXVariableDeclaration}
	name=ValidID ('=' right=XExpression)?;

XAssignment returns XExpression :
	=>({JavammXAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] 
		'[' indexes+=XExpression ']'('[' indexes+=XExpression ']')*
		OpSingleAssign) value=XAssignment |	
	=>({XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] 
		OpSingleAssign) value=XAssignment |	
	XOrExpression (
		=>({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment
	)?;

XFeatureCall returns XExpression:
	{XFeatureCall}
	feature=[types::JvmIdentifiableElement|IdOrSuper] 
	(=>explicitOperationCall?='(' 
		(
		    featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*
		)? 
	')' 
	)?;

XConstructorCall returns XExpression:
	{XConstructorCall}
	'new' constructor=[types::JvmConstructor|QualifiedName] 
	(=>explicitConstructorCall?='(' 
		(
		    arguments+=XExpression (',' arguments+=XExpression)*
		)? 
	')')?;

// dimensions and dimension expressions (feature indexes) are not associated during parsing,
// the association, i.e., knowing whether a dimension expression comes after
// an empty dimension (which is not legal), will be retrieved by
// JavammModelUtil.arrayDimensionIndexAssociations(JavammArrayConstructorCall)
// based on the offset of the [ and the array dimension XEpression
JavammArrayConstructorCall returns XExpression:
	=>({JavammArrayConstructorCall}
	'new'
	type=[types::JvmType|QualifiedName] dimensions+=JavammArrayDimension) 
	// getting here is enough to tell it's an array constructor call
	(indexes+=XExpression)? ']'
	(=>dimensions+=JavammArrayDimension (indexes+=XExpression)? ']')*
	(=>arrayLiteral=JavammArrayLiteral)?
;

// We need an EObject instead of a simple String since we then
// need to find the corresponding node (and offset) with NodeModelUtils
// in order to associate dimensions with indexes
JavammArrayDimension:
	{JavammArrayDimension} openBracket='['
;

XPostfixOperation returns XExpression:
	=>({JavammPrefixOperation} feature=[types::JvmIdentifiableElement|OpPostfix]) operand=XMemberFeatureCall
	|
	XMemberFeatureCall
	(
		=>({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])
		|
		=>({JavammArrayAccessExpression.array=current} '[' indexes+=XExpression ']'(=>'[' indexes+=XExpression ']')*)
	)?
;

XMemberFeatureCall returns XExpression:
	XPrimaryExpression
	(
// we don't need this at the moment
//		=>({JavammXAssignment.assignable=current} ('.'|explicitStatic?="::") 
//			feature=[types::JvmIdentifiableElement|FeatureCallID]
//			'[' index=XExpression ']'
//			OpSingleAssign) value=XAssignment
//	|
		=>({XAssignment.assignable=current} '.'
			feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign)
				value=XAssignment
	|
		// Note that the custom implementation JavammXMemberFeatureCallImplCustom
		// will rearrange the containment when the assignment
		// memberCallTarget=current
		// is performed
		// 1. a JavammArrayAccessExpression will be created
		// 2. perform the assignment JavammArrayAccessExpression.array = current
		// 3. indexes are delegated to JavammArrayAccessExpression.indexes
		// thus instead of 
		// JavammXMemberFeatureCall {
		// 		memberCallTarget=current,
		// 		indexes=expressions
		// }
		// the actual model object will be
		// JavammXMemberFeatureCall {
		//		memberCallTarget=JavammArrayAccessExpression {
		// 			array=current,
		// 			indexes=expressions
		//		}
		// }
		=>({JavammXMemberFeatureCall.memberCallTarget=current}
			'[' indexes+=XExpression ']'('[' indexes+=XExpression ']')*
			".") 
			feature=[types::JvmIdentifiableElement|IdOrSuper] (
				=>explicitOperationCall?='(' 
					(
					    memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
					)? 
				')')?
	|
		=>({XMemberFeatureCall.memberCallTarget=current} ".") 
			feature=[types::JvmIdentifiableElement|IdOrSuper] (
				=>explicitOperationCall?='(' 
					(
					    memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*
					)? 
				')')?
	)*;

XBasicForLoopExpression returns XExpression:
	{XBasicForLoopExpression}
	'for' '('(initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';' 
		expression=XExpression? ';' 
		(updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
		eachExpression=JavammStatementOrBlock;

XIfExpression returns XExpression:
	{XIfExpression}
	'if' '(' if=XExpression ')'
	then=JavammStatementOrBlock
	(=>'else' else=JavammStatementOrBlock)?;

XWhileExpression returns XExpression:
	{XWhileExpression}
	'while' '(' predicate=XExpression ')'
		body=JavammStatementOrBlock;

XDoWhileExpression returns XExpression:
	{XDoWhileExpression}
   'do'
       body=JavammStatementOrBlock
   'while' '(' predicate=XExpression ')';

XSwitchExpression returns XExpression:
	{XSwitchExpression}
	'switch' '(' switch=XExpression ')' '{'
	(cases+=XCasePart)*
	('default' ':' default=JavammSwitchStatements )?
	'}';

XCasePart:
	{XCasePart}
	'case' case=XExpression
		':' then=JavammSwitchStatements;

/**
 * Java switch's case expression does not require an explicit block { }
 */
JavammSwitchStatements returns XExpression:
	{XBlockExpression}
	(expressions+=JavammStatementOrBlock ';'*)*
;

XPrimaryExpression returns XExpression:
	JavammArrayConstructorCall |
	XConstructorCall |
//	XBlockExpression |
//	XSwitchExpression |
//	XSynchronizedExpression |
	XFeatureCall |
	XLiteral |
//	XIfExpression |
//	XForLoopExpression |
//	XBasicForLoopExpression |
//	XWhileExpression |
//	XDoWhileExpression |
//	XThrowExpression |
//	XReturnExpression |
//	XTryCatchFinallyExpression |
	XParenthesizedExpression;

XLiteral returns XExpression:
//	XCollectionLiteral |
//	XClosure |
	XBooleanLiteral |
	XNumberLiteral |
	XNullLiteral |
	XCharLiteral |
	XStringLiteral |
	JavammArrayLiteral
//	XTypeLiteral
;

// it is a subclass of XListLiteral, so that we will reuse
// type computation and compiler from Xbase
JavammArrayLiteral returns JavammArrayLiteral:
	{JavammArrayLiteral} '{' (elements+=XExpression (',' elements+=XExpression )*)? '}'
;

/*
 * We want to tell between string and char literals since we'll treat them
 * differently from the type computation point of view.
 */

XCharLiteral returns XExpression:
	{JavammCharLiteral} value=CHARACTER;

XStringLiteral returns XExpression:
	{XStringLiteral} value=STRING;

terminal STRING: 
			'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'?;

terminal CHARACTER: 
			"'" ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|"'") )* "'"?;

OpEquality:
	'==' | '!=' ;
