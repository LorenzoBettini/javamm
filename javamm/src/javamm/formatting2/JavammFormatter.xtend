/*
 * generated by Xtext
 */
package javamm.formatting2;

import javamm.javamm.JavammMethod
import javamm.javamm.JavammProgram
import javamm.javamm.Main
import jbase.formatting2.JbaseFormatter
import org.eclipse.xtext.formatting2.IFormattableDocument

class JavammFormatter extends JbaseFormatter {

	override void format(Object expr, extension IFormattableDocument document) {
		// you could use dispatch methods, but that will generate many other
		// if cases for inherited dispatch methods that will never be executed during the
		// tests and I prefer to have full control on code coverage.
		if (expr instanceof JavammProgram) {
			_format(expr, document)
		} else if (expr instanceof JavammMethod) {
			_format(expr, document)
		} else if (expr instanceof Main) {
			_format(expr, document)
		} else {
			super.format(expr, document)
		}
	}

	def void _format(JavammProgram javammprogram, extension IFormattableDocument document) {
		val importSection = javammprogram.getImportSection()
		if (importSection !== null) {
			// to avoid a useless newline at the beginning of the program
			javammprogram.prepend[setNewLines(0, 0, 0); noSpace]
			format(importSection, document);
		} else {
			javammprogram.prepend[setNewLines(0, 0, 1); noSpace]
		}
		for (JavammMethod javammMethod : javammprogram.javammMethods) {
			format(javammMethod, document);
			
			if (javammMethod != javammprogram.javammMethods.last)
				javammMethod.append[setNewLines(2, 2, 2)]
			else
				javammMethod.append[setNewLines(1, 1, 2)]
		}
		format(javammprogram.getMain(), document);
	}

	def void _format(JavammMethod javammmethod, extension IFormattableDocument document) {
		javammmethod.type.prepend[noSpace].append[oneSpace]
		format(javammmethod.type, document);

		javammmethod.regionFor.keyword("(").surround[noSpace]
		if (!javammmethod.params.isEmpty) {
			for (comma : javammmethod.regionFor.keywords(","))
				comma.prepend[noSpace].append[oneSpace]
			for (params : javammmethod.params)
				format(params, document);
			javammmethod.regionFor.keyword(")").prepend[noSpace]
		}
		javammmethod.regionFor.keyword(")").append[oneSpace]

		format(javammmethod.body, document);
	}

	def void _format(Main main, extension IFormattableDocument document) {
		formatExpressions(main.expressions, document, false)
	}
}
