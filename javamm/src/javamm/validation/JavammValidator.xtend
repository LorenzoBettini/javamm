/*
 * generated by Xtext
 */
package javamm.validation

import com.google.inject.Inject
import javamm.javamm.JavammMethod
import javamm.javamm.JavammPackage
import javamm.javamm.JavammProgram
import javamm.javamm.Main
import javamm.util.JavammModelUtil
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.xbase.XBlockExpression
import org.eclipse.xtext.xbase.typesystem.^override.OverrideHelper
import org.eclipse.xtext.xbase.typesystem.util.Multimaps2

/**
 * Custom validation rules. 
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class JavammValidator extends AbstractJavammValidator {

	public static val PREFIX = "javamm."

	public static val DUPLICATE_METHOD = PREFIX + "DuplicateMethod"

	@Inject extension JavammModelUtil
	@Inject OverrideHelper overrideHelper

	@Check
	def void checkDuplicateMethods(JavammProgram p) {
		val javaClass = p.inferredJavaClass
		val methods = overrideHelper.getResolvedFeatures(javaClass).declaredOperations

		val map = duplicatesMultimap

		for (d : methods) {
			map.put(d.resolvedErasureSignature, d.getDeclaration)
		}

		for (entry : map.asMap.entrySet) {
			val duplicates = entry.value
			if (duplicates.size > 1) {
				val originalSources = duplicates.map[originalSource]
				val sources = originalSources.iterator
				if (originalSources.exists[it instanceof Main]) {
					for (d : duplicates) {
						val source = sources.next
						if (!(source instanceof Main)) // no element to put error on
							error(
								entry.key + " is a reserved method",
								source,
								JavammPackage.eINSTANCE.javammMethod_Name,
								DUPLICATE_METHOD
							)
					}
				} else {
					for (d : duplicates) {
						val source = sources.next
						error(
							"Duplicate definition '" + d.simpleName + "'",
							source,
							JavammPackage.eINSTANCE.javammMethod_Name,
							DUPLICATE_METHOD
						)
					}
				}
			}
		}
	}

	@Check
	def void checkMain(Main m) {
		checkVariableInitialization(m)
	}

	@Check
	def void checkMethod(JavammMethod method) {
		val body = method.body as XBlockExpression
		checkVariableInitialization(body)
		checkMissingReturn(body)
	}

	def private <K, T> duplicatesMultimap() {
		return Multimaps2.<K, T>newLinkedHashListMultimap();
	}
}
