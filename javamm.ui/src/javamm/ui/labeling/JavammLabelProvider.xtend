/*
* generated by Xtext
*/
package javamm.ui.labeling

import com.google.inject.Inject
import javamm.javamm.JavammMethod
import javamm.javamm.Main
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.common.types.JvmOperation
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider

/**
 * Provides labels for a EObjects.  For method definitions simply
 * delegates to XbaseLabelProvider, passing the corresponding inferred JvmOperation.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 * 
 * @author Lorenzo Bettini
 */
class JavammLabelProvider extends XbaseLabelProvider {
	
	@Inject extension IJvmModelAssociations

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(JavammMethod m) {
		text(m.inferredJavaMethod)
	}

	def image(JavammMethod m) {
		imageDescriptor(m.inferredJavaMethod)
	}

	def text(Main m) {
		text(m.eContainer.inferredJavaMethod)
	}
	
	def image(Main m) {
		imageDescriptor(m.eContainer.inferredJavaMethod)
	}

	private def inferredJavaMethod(EObject e) {
		e.jvmElements.filter(JvmOperation).head
	}

}
