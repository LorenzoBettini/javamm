/**
 * generated by Xtext
 */
package javamm.ui.labeling;

import static com.google.common.collect.Iterables.filter;
import static org.eclipse.xtext.xbase.lib.IterableExtensions.head;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.xtext.common.types.JvmOperation;
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations;
import org.eclipse.xtext.xbase.ui.labeling.XbaseLabelProvider;

import com.google.inject.Inject;

import javamm.javamm.JavammMethod;
import javamm.javamm.Main;

/**
 * Provides labels for a EObjects. For method definitions simply delegates to
 * XbaseLabelProvider, passing the corresponding inferred JvmOperation.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 * 
 * @author Lorenzo Bettini
 */
public class JavammLabelProvider extends XbaseLabelProvider {
	@Inject
	private IJvmModelAssociations jvmModelAssociations;

	@Inject
	public JavammLabelProvider(final AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	public Object text(final JavammMethod m) {
		return text(inferredJavaMethod(m));
	}

	public ImageDescriptor image(final JavammMethod m) {
		return imageDescriptor(inferredJavaMethod(m));
	}

	public Object text(final Main m) {
		return text(inferredJavaMethod(m));
	}

	public ImageDescriptor image(final Main m) {
		return imageDescriptor(inferredJavaMethod(m));
	}

	private JvmOperation inferredJavaMethod(final EObject e) {
		return head(
				filter(jvmModelAssociations.getJvmElements(e), JvmOperation.class));
	}
}
